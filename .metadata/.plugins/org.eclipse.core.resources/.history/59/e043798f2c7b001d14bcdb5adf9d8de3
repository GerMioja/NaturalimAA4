package com.naturalim.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.naturalim.demo.models.Response;
import com.naturalim.demo.models.Sugerencias;
import com.naturalim.demo.service.ISugerenciasService;

@Controller
@RequestMapping("/app")
@SessionAttributes("sugerencias")
public class SugerenciasController {
	
	@Value("${titlePage.param}")
	private String titlePage;
	
	@Value("${mensaje.param}")
	private String mensaje;
	
	@Autowired 
	private ISugerenciasService IpService;
	
	@GetMapping("/sugerencias")
	public String ListarSugerencias(Model model) {
		model.addAttribute("titlePage", titlePage);
		model.addAttribute("mensaje", mensaje);
		Response<Sugerencias> response = IpService.ObtenerListaSugerencias();
		
		if (response.getEstado()) {
			model.addAttribute("ListaSugerencias", response.getListData());
			return "sugerencias";
		} else {
			model.addAttribute("errores", response.getMensajeError());
			return "errores";
		}
	}
	
	@GetMapping("/sform")
	public String FormularioSugerencias(Model model) {

		Sugerencias sugerencias = new Sugerencias();

		model.addAttribute("titlePage", titlePage);
		model.addAttribute("titulo", "Naturalim - Registro de Sugerencias");

		model.addAttribute("sugerencias", sugerencias);

		return "sugerenciasForm";
	}
	
	@PostMapping("/sNuevoform")
	public String CrearFormulario(@Validated Sugerencias sugerencias, BindingResult br, Model model, SessionStatus status) {

		if (br.hasErrors()) {
			return "sugerenciasForm";
		}
		model.addAttribute("titlePage", titlePage);
		Response<Sugerencias> response = IpService.CrearSugerencias(sugerencias);

		if (response.getEstado()) {
			model.addAttribute("titulo", "Sugerencias Naturalim");
			model.addAttribute("ListaSugerencias", response.getListData());

			status.setComplete();
			return "sugerencias";
		} else {
			model.addAttribute("errores", response.getMensajeError());

			status.setComplete();
			return "errores";
		}
	}
	
	@GetMapping("/sEditar/{id}")
	public String editarSugerencias(@PathVariable int id, Model model) {
		
		model.addAttribute("titlePage", titlePage);
		Response<Sugerencias> response = IpService.EditarSugerencias(id);

		if (response.getEstado()) {		
			model.addAttribute("sugerencias", response.getData());
			return "sugerenciasForm";
		} else {
			model.addAttribute("respuesta", response.getMensaje());
			model.addAttribute("errores", response.getMensajeError());

			return "errores";
		}
	}
	
	@GetMapping("/sEliminar/{id}")
	public String eliminarSugerencias(@PathVariable int id, Model model) {
		
		model.addAttribute("titlePage", titlePage);
		Response<Sugerencias> response = IpService.EliminarSugerencias(id);

		if (response.getEstado()) {
			model.addAttribute("titulo", "Naturalim - "+response.getMensaje());	
			model.addAttribute("respuesta", response.getMensaje());
			return "redirect:/app/sugerencias";
		} else {
			model.addAttribute("respuesta", response.getMensaje());
			model.addAttribute("errores", response.getMensajeError());

			return "errores";
		}		
	}
	
}
